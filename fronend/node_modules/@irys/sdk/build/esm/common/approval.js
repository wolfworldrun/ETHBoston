import Utils from "./utils.js";
export class Approval {
    irys;
    constructor(irys) {
        this.irys = irys;
    }
    async getApprovedBalance({ payingAddress = this.irys.address, token = this.irys.token, approvedAddress, }) {
        const res = await this.irys.api.get("/account/approval", { params: { payingAddress, token, approvedAddress } });
        if (res.status === 404)
            return { amount: "0" };
        Utils.checkAndThrow(res);
        return res.data;
    }
    async createApproval({ approvedAddress, amount, expiresInSeconds, }) {
        const tags = [
            { name: UploadApprovalTags.APPROVE_PAYMENT, value: approvedAddress },
            { name: UploadApprovalMetaTags.AMOUNT, value: amount.toString() },
        ];
        if (expiresInSeconds)
            tags.push({ name: UploadApprovalMetaTags.EXPIRE_SECONDS, value: expiresInSeconds.toString() });
        return await this.irys.upload("", { tags });
    }
    async revokeApproval({ approvedAddress }) {
        const tags = [{ name: UploadApprovalTags.DELETE_APPROVAL, value: approvedAddress }];
        return await this.irys.upload("", { tags });
    }
}
export var UploadApprovalTags;
(function (UploadApprovalTags) {
    UploadApprovalTags["APPROVE_PAYMENT"] = "x-irys-approve-payment";
    UploadApprovalTags["DELETE_APPROVAL"] = "x-irys-delete-payment-approval";
})(UploadApprovalTags || (UploadApprovalTags = {}));
export var UploadApprovalMetaTags;
(function (UploadApprovalMetaTags) {
    UploadApprovalMetaTags["AMOUNT"] = "x-amount";
    UploadApprovalMetaTags["EXPIRE_SECONDS"] = "x-expire-seconds";
})(UploadApprovalMetaTags || (UploadApprovalMetaTags = {}));
//# sourceMappingURL=approval.js.map