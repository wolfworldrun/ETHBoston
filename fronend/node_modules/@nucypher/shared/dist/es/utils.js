import deepEqual from 'deep-equal';
// TODO: Replace byte and hex manipulation with ethers.js
export const toBytes = (str) => new TextEncoder().encode(str);
export const fromBytes = (bytes) => new TextDecoder().decode(bytes);
export const fromHexString = (hexString) => {
    if (hexString.startsWith('0x')) {
        hexString = hexString.slice(2);
    }
    const matches = hexString.match(/.{1,2}/g) ?? [];
    return new Uint8Array(matches.map((byte) => parseInt(byte, 16)));
};
export const toHexString = (bytes) => bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');
export const toBase64 = (bytes) => btoa(String.fromCharCode(...bytes));
export const fromBase64 = (str) => Uint8Array.from(atob(str), (c) => c.charCodeAt(0));
export const hexToU8Receiver = (_key, value) => {
    if (typeof value === 'string' && value.startsWith('0x')) {
        return fromHexString(value);
    }
    return value;
};
const sortedReplacer = (_key, value) => {
    if (value instanceof Object && !(value instanceof Array)) {
        return Object.keys(value)
            .sort()
            .reduce((sorted, key) => {
            sorted[key] = value[key];
            return sorted;
        }, {});
    }
    return value;
};
const u8ToHexReplacer = (_key, value) => {
    if (value instanceof Uint8Array) {
        return `0x${toHexString(value)}`;
    }
    return value;
};
const sortedSerializingReplacer = (_key, value) => {
    const serializedValue = u8ToHexReplacer(_key, value);
    return sortedReplacer(_key, serializedValue);
};
export const toJSON = (obj) => JSON.stringify(obj, sortedSerializingReplacer);
export const fromJSON = (json) => JSON.parse(json, hexToU8Receiver);
export const zip = (a, b) => a.map((k, i) => [k, b[i]]);
export const toEpoch = (date) => (date.getTime() / 1000) | 0;
export const objectEquals = (a, b, strict = true) => deepEqual(a, b, { strict });
export const omit = (obj, keys) => {
    const copy = { ...obj };
    keys.forEach((key) => delete copy[key]);
    return copy;
};
//# sourceMappingURL=utils.js.map