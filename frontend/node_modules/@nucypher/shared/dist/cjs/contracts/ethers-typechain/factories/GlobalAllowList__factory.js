"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalAllowList__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        type: 'constructor',
        stateMutability: 'nonpayable',
        inputs: [
            {
                name: '_coordinator',
                type: 'address',
                internalType: 'contract Coordinator',
            },
        ],
    },
    {
        type: 'error',
        name: 'ECDSAInvalidSignature',
        inputs: [],
    },
    {
        type: 'error',
        name: 'ECDSAInvalidSignatureLength',
        inputs: [
            {
                name: 'length',
                type: 'uint256',
                internalType: 'uint256',
            },
        ],
    },
    {
        type: 'error',
        name: 'ECDSAInvalidSignatureS',
        inputs: [
            {
                name: 's',
                type: 'bytes32',
                internalType: 'bytes32',
            },
        ],
    },
    {
        type: 'event',
        name: 'AddressAuthorizationSet',
        inputs: [
            {
                name: 'ritualId',
                type: 'uint32',
                internalType: 'uint32',
                indexed: true,
            },
            {
                name: '_address',
                type: 'address',
                internalType: 'address',
                indexed: true,
            },
            {
                name: 'isAuthorized',
                type: 'bool',
                internalType: 'bool',
                indexed: false,
            },
        ],
        anonymous: false,
    },
    {
        type: 'function',
        name: 'authorize',
        stateMutability: 'nonpayable',
        inputs: [
            {
                name: 'ritualId',
                type: 'uint32',
                internalType: 'uint32',
            },
            {
                name: 'addresses',
                type: 'address[]',
                internalType: 'address[]',
            },
        ],
        outputs: [],
    },
    {
        type: 'function',
        name: 'coordinator',
        stateMutability: 'view',
        inputs: [],
        outputs: [
            {
                name: '',
                type: 'address',
                internalType: 'contract Coordinator',
            },
        ],
    },
    {
        type: 'function',
        name: 'deauthorize',
        stateMutability: 'nonpayable',
        inputs: [
            {
                name: 'ritualId',
                type: 'uint32',
                internalType: 'uint32',
            },
            {
                name: 'addresses',
                type: 'address[]',
                internalType: 'address[]',
            },
        ],
        outputs: [],
    },
    {
        type: 'function',
        name: 'isAddressAuthorized',
        stateMutability: 'view',
        inputs: [
            {
                name: 'ritualId',
                type: 'uint32',
                internalType: 'uint32',
            },
            {
                name: 'encryptor',
                type: 'address',
                internalType: 'address',
            },
        ],
        outputs: [
            {
                name: '',
                type: 'bool',
                internalType: 'bool',
            },
        ],
    },
    {
        type: 'function',
        name: 'isAuthorized',
        stateMutability: 'view',
        inputs: [
            {
                name: 'ritualId',
                type: 'uint32',
                internalType: 'uint32',
            },
            {
                name: 'evidence',
                type: 'bytes',
                internalType: 'bytes',
            },
            {
                name: 'ciphertextHeader',
                type: 'bytes',
                internalType: 'bytes',
            },
        ],
        outputs: [
            {
                name: '',
                type: 'bool',
                internalType: 'bool',
            },
        ],
    },
];
class GlobalAllowList__factory {
    static abi = _abi;
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.GlobalAllowList__factory = GlobalAllowList__factory;
//# sourceMappingURL=GlobalAllowList__factory.js.map