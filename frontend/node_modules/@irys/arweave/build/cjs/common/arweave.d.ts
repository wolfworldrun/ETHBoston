import Blocks from "@irys/arweave/build/cjs/common/blocks";
import Chunks from "@irys/arweave/build/cjs/common/chunks";
import type { ApiConfig } from "@irys/arweave/build/cjs/common/lib/api";
import type { AugmentedCrypto } from "@irys/arweave/build/cjs/common/lib/crypto/crypto-augment";
import type CryptoInterface from "@irys/arweave/build/cjs/common/lib/crypto/crypto-interface";
import { DeepHash } from "@irys/arweave/build/cjs/common/lib/deepHash";
import FallbackApi from "@irys/arweave/build/cjs/common/lib/fallbackApi";
import Merkle from "@irys/arweave/build/cjs/common/lib/merkle";
import type { Tag } from "@irys/arweave/build/cjs/common/lib/transaction";
import Transaction from "@irys/arweave/build/cjs/common/lib/transaction";
import * as ArweaveUtils from "@irys/arweave/build/cjs/common/lib/utils";
import type { JWKInterface } from "@irys/arweave/build/cjs/common/lib/wallet";
import Network from "@irys/arweave/build/cjs/common/network";
import Transactions from "@irys/arweave/build/cjs/common/transactions";
import Wallets from "@irys/arweave/build/cjs/common/wallets";
export type CreateTransactionInterface = {
    format: number;
    last_tx: string;
    owner: string;
    tags: Tag[];
    target: string;
    quantity: string;
    data: string | Uint8Array | ArrayBuffer;
    data_size: string;
    data_root: string;
    reward: string;
};
export type AbstractConfig = {
    gateways?: URL | string | ApiConfig | ApiConfig[] | string[] | URL[];
    crypto?: CryptoInterface;
    miners?: ApiConfig[] | string[] | URL[];
};
export declare abstract class Arweave {
    protected config: AbstractConfig;
    api: FallbackApi;
    wallets: Wallets;
    transactions: Transactions;
    network: Network;
    blocks: Blocks;
    chunks: Chunks;
    static init: (apiConfig: ApiConfig) => Arweave;
    static utils: typeof ArweaveUtils;
    crypto: AugmentedCrypto;
    protected deepHash: DeepHash;
    merkle: Merkle;
    static VERSION: string;
    constructor(config: AbstractConfig);
    get utils(): typeof ArweaveUtils;
    getConfig(): AbstractConfig;
    createTransaction(attributes: Partial<CreateTransactionInterface>, jwk?: JWKInterface | "use_wallet"): Promise<Transaction>;
}
export default Arweave;
